{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Identity in AWS includes providing authentication, authorization, audit and governance for you cloud workloads. Identity services in AWS include Amazon Cognito for Application Identity and AWS Identity and Access Management (IAM) for AWS Management Console and Command Line Interface (CLI) access and Infrastructure Identity. Infrastructure identity includes access to operating systems, relational databases and containers. This workshop focuses on infrastructure identity where you can utilize IAM Users, Roles and Policies to grant access to infrastructure such as EC2, RDS and ECS. This workshop is designed to help you get familiar with AWS Security services and learn how to use them to securely administer systems in your environment. You'll be working with services such as AWS Systems Manager Session Manager, Amazon EC2 Instance Connect, and AWS Identity and Access Management. You will learn how to use these services to securely connect and administer your Amazon EC2 Instances as well as systems on-premise, you will setup tagged based access, and configure logging which will enable auditing of administrative activities and improve the security posture of your environment. Level : Intermediate Duration : 2 hours CSF Functions : Protect and Detect CAF Components : Preventative, Detective Prerequisites : AWS Account, Admin IAM User Scenario Your company is new to the cloud and has deployed their first set of development and productions systems in AWS, additionally you still have hosts to manage in your data center. You are a systems administrator and have been tasked with setting up secure administrative access to your systems in AWS and on-premise. As part of that configuration you are also responsible for confirming that you can audit administrative activities. Security has found that ssh keys are not properly secured and is asking for a better solution to secure administration of your on-premise systems and your EC2 Instances in AWS. Your security team has asked if there is way to centrally manage administrative access to systems and have full audit capabilities. Architecture In the first module we launch 4 instances in the us-east-1 region, 2 instances will be your EC2 instances, the other 2 instances will be mock on-premise servers. Additionally, we will be build a Cloud9 IDE environment and use this as our workspace for the workshop. AWS Cloud9 is a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. It includes a code editor, debugger, and terminal. Cloud9 comes pre-packaged with essential tools for popular programming languages and the AWS Command Line Interface (CLI) pre-installed so you don\u2019t need to install files or configure your laptop for this workshop. Presentation deck Workshop Presentation Deck Region Please use the us-east-1(N. Virginia) region for this workshop. Modules This workshop is broken up into the four modules below: Environment setup Session Manager EC2-Instance-Connect Clean-up","title":"Overview"},{"location":"#overview","text":"Identity in AWS includes providing authentication, authorization, audit and governance for you cloud workloads. Identity services in AWS include Amazon Cognito for Application Identity and AWS Identity and Access Management (IAM) for AWS Management Console and Command Line Interface (CLI) access and Infrastructure Identity. Infrastructure identity includes access to operating systems, relational databases and containers. This workshop focuses on infrastructure identity where you can utilize IAM Users, Roles and Policies to grant access to infrastructure such as EC2, RDS and ECS. This workshop is designed to help you get familiar with AWS Security services and learn how to use them to securely administer systems in your environment. You'll be working with services such as AWS Systems Manager Session Manager, Amazon EC2 Instance Connect, and AWS Identity and Access Management. You will learn how to use these services to securely connect and administer your Amazon EC2 Instances as well as systems on-premise, you will setup tagged based access, and configure logging which will enable auditing of administrative activities and improve the security posture of your environment. Level : Intermediate Duration : 2 hours CSF Functions : Protect and Detect CAF Components : Preventative, Detective Prerequisites : AWS Account, Admin IAM User","title":"Overview"},{"location":"#scenario","text":"Your company is new to the cloud and has deployed their first set of development and productions systems in AWS, additionally you still have hosts to manage in your data center. You are a systems administrator and have been tasked with setting up secure administrative access to your systems in AWS and on-premise. As part of that configuration you are also responsible for confirming that you can audit administrative activities. Security has found that ssh keys are not properly secured and is asking for a better solution to secure administration of your on-premise systems and your EC2 Instances in AWS. Your security team has asked if there is way to centrally manage administrative access to systems and have full audit capabilities.","title":"Scenario"},{"location":"#architecture","text":"In the first module we launch 4 instances in the us-east-1 region, 2 instances will be your EC2 instances, the other 2 instances will be mock on-premise servers. Additionally, we will be build a Cloud9 IDE environment and use this as our workspace for the workshop. AWS Cloud9 is a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. It includes a code editor, debugger, and terminal. Cloud9 comes pre-packaged with essential tools for popular programming languages and the AWS Command Line Interface (CLI) pre-installed so you don\u2019t need to install files or configure your laptop for this workshop.","title":"Architecture"},{"location":"#presentation-deck","text":"Workshop Presentation Deck","title":"Presentation deck"},{"location":"#region","text":"Please use the us-east-1(N. Virginia) region for this workshop.","title":"Region"},{"location":"#modules","text":"This workshop is broken up into the four modules below: Environment setup Session Manager EC2-Instance-Connect Clean-up","title":"Modules"},{"location":"01-environment-setup/","text":"Module 1: Setup Instructions In the first module you will set up a VPC with a Cloud9 IDE for your use. You'll be running one CloudFormation template which will automate the creation of the environment and then you will manually configure the rest. AWS Cloud9 is a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. It includes a code editor, debugger, and terminal. Cloud9 comes pre-packaged with essential tools for popular programming languages and the AWS Command Line Interface (CLI) pre-installed so you don\u2019t need to install files or configure your laptop for this workshop. To setup your environment please expand one of the following drop-downs (depending on how if you are doing this workshop at an AWS event or individually ) and follow the instructions: Click here if you are using your own AWS account . You will be using your computer to run the commands. Log in to your account however you would normally. You should use an IAM user or role with admin rights. CloudFormation: Launch the CloudFormation stack below to setup the environment: Region Deploy US East 1 (Virginia) Click the Deploy to AWS button above. This will automatically take you to the console to run the template. Click Next under the Create stack section. Click Next under the Specify stack details section (the stack name will already be filled - you can leave the other options in Parameters at their default settings too) Click Next under the Advanced options section. Finally, acknowledge that the template will create IAM resources with custom names under Capabilities and click Create stack . This will bring you back to the CloudFormation console. You can refresh the stack set to see the latest status. Before moving on, make sure the stack finally shows CREATE_COMPLETE . You will need to configure the AWS CLI on your computer with an access key from a principal (IAM user, role, etc) that has at least IAM Full Access and sts:AssumeRole (in order to complete the cleanup at the end, you will also need Lambda Full Access and CloudFormation Full Access.) Then move on to Task 1 . Click here if you're at an AWS event where the Event Engine is being used. You will be using Cloud9 to run the commands. Step 1 : Retrieve temporary credentials from Event Engine Navigate to the Event Engine dashboard Enter your team hash code. Click AWS Console Copy the export commands under the Credentials section for the temporary credentials (you will need these in the next step.) Step 2 : Connect to the AWS Console via Event Engine and browse to the AWS Cloud9 IDE Click Open Console from the Event Engine window Navigate to the AWS Cloud9 console. Click on Open IDE in the workshop-environment under Your environments Click the gear image icon in the upper right hand corner to open the Cloud9 Preferences. Scroll down in the settings, click on the AWS SETTINGS section and click the button next to AWS managed temporary credentials to disable this. Now go to a Cloud9 terminal tab (tab title will start with the words bash ). Type aws configure --profile default hit enter. Hit enter until you get to the choice Default region name and type in us-east-1 . Hit enter and then enter again to leave this menu. Then create a file in the ~/.aws directory named credentials and paste in the credentials you copied from the Event Engine. You will need to remove the word export from the start of each line. Add [default] before all these rows. You should end up with something that looks like this: [default] AWS_ACCESS_KEY_ID=ASIA _ _ AWS_SECRET_ACCESS_KEY=iZoD _ _ _ __ AWS_SESSION_TOKEN=FQoG _ _ _ _ _ _ ___ Now you can run commands from within the Cloud9 IDE using the temporary credentials from Event Engine. If you open a new tab you will need to paste in the credentials again. Move on to Task 1 . Architecture Overview Your environment is now configured and ready for next steps. Below is a diagram to depict the initial environment. After you have successfully setup your environment, you can proceed to the next module.","title":"Module 1: Environment setup"},{"location":"01-environment-setup/#module-1-setup-instructions","text":"In the first module you will set up a VPC with a Cloud9 IDE for your use. You'll be running one CloudFormation template which will automate the creation of the environment and then you will manually configure the rest. AWS Cloud9 is a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. It includes a code editor, debugger, and terminal. Cloud9 comes pre-packaged with essential tools for popular programming languages and the AWS Command Line Interface (CLI) pre-installed so you don\u2019t need to install files or configure your laptop for this workshop. To setup your environment please expand one of the following drop-downs (depending on how if you are doing this workshop at an AWS event or individually ) and follow the instructions: Click here if you are using your own AWS account . You will be using your computer to run the commands. Log in to your account however you would normally. You should use an IAM user or role with admin rights. CloudFormation: Launch the CloudFormation stack below to setup the environment: Region Deploy US East 1 (Virginia) Click the Deploy to AWS button above. This will automatically take you to the console to run the template. Click Next under the Create stack section. Click Next under the Specify stack details section (the stack name will already be filled - you can leave the other options in Parameters at their default settings too) Click Next under the Advanced options section. Finally, acknowledge that the template will create IAM resources with custom names under Capabilities and click Create stack . This will bring you back to the CloudFormation console. You can refresh the stack set to see the latest status. Before moving on, make sure the stack finally shows CREATE_COMPLETE . You will need to configure the AWS CLI on your computer with an access key from a principal (IAM user, role, etc) that has at least IAM Full Access and sts:AssumeRole (in order to complete the cleanup at the end, you will also need Lambda Full Access and CloudFormation Full Access.) Then move on to Task 1 . Click here if you're at an AWS event where the Event Engine is being used. You will be using Cloud9 to run the commands. Step 1 : Retrieve temporary credentials from Event Engine Navigate to the Event Engine dashboard Enter your team hash code. Click AWS Console Copy the export commands under the Credentials section for the temporary credentials (you will need these in the next step.) Step 2 : Connect to the AWS Console via Event Engine and browse to the AWS Cloud9 IDE Click Open Console from the Event Engine window Navigate to the AWS Cloud9 console. Click on Open IDE in the workshop-environment under Your environments Click the gear image icon in the upper right hand corner to open the Cloud9 Preferences. Scroll down in the settings, click on the AWS SETTINGS section and click the button next to AWS managed temporary credentials to disable this. Now go to a Cloud9 terminal tab (tab title will start with the words bash ). Type aws configure --profile default hit enter. Hit enter until you get to the choice Default region name and type in us-east-1 . Hit enter and then enter again to leave this menu. Then create a file in the ~/.aws directory named credentials and paste in the credentials you copied from the Event Engine. You will need to remove the word export from the start of each line. Add [default] before all these rows. You should end up with something that looks like this: [default] AWS_ACCESS_KEY_ID=ASIA _ _ AWS_SECRET_ACCESS_KEY=iZoD _ _ _ __ AWS_SESSION_TOKEN=FQoG _ _ _ _ _ _ ___ Now you can run commands from within the Cloud9 IDE using the temporary credentials from Event Engine. If you open a new tab you will need to paste in the credentials again. Move on to Task 1 .","title":"Module 1: Setup Instructions"},{"location":"01-environment-setup/#architecture-overview","text":"Your environment is now configured and ready for next steps. Below is a diagram to depict the initial environment. After you have successfully setup your environment, you can proceed to the next module.","title":"Architecture Overview"},{"location":"02-using-AWS-Systems-Manager-Session-Manager/","text":"Module 2: Session Manager ~ 30 minutes We were given the task to setup secure administrative access to our instances but we know that anytime someone logs into a server changes can be made and those changes could inadvertently affect the security of the host. Instead of hoping our system security doesn't change, let's change the access pattern and restrict all access into production systems. This approach to administrative access is called Immutable Infrastructure , which includes managing services and software deployments on IT resources wherein components are replaced rather than changed. An application or services is effectively redeployed each time any change occurs. Given this is a new access pattern for our team, we will continue to allow access to our development systems. Using Amazon Systems Manager Session Manager and AWS IAM with tag based permissions we will implement this exact scenario and review the audit logs. In this Module we will create IAM roles with permissions to enable Session Manager access. Additionally, we are going to deploy 4 systems: AWS EC2 Instance tagged with development AWS EC2 Instance tagged with production Mock on-premise system tagged with development Mock on-premise system tagged with production Please note our mock on-premise systems will be EC2 instances, however we will treat them like on-premise systems by not assigning an Instance Profile. Terminology A managed instance is any machine configured for AWS Systems Manager. You can configure Amazon EC2 instances or on-premises machines in a hybrid environment as a managed instance . Systems Manager supports various distributions of Linux, including Raspberry Pi devices, and Microsoft Windows Server. In the AWS Management Console, any machine prefixed with \"mi-\" is an on-premises server or virtual machine (VM) managed instance . AWS Systems Manager offers a standard-instances tier and an advanced-instances tier for servers and VMs in your hybrid environment. Advanced instances also enable you to connect to your hybrid machines by using AWS Systems Manager Session Manager. Session Manager provides interactive shell access to your instances. While this lab focuses on Session Manager which is a capability of AWS Systems Manager there are several other capabilities of AWS Systems Manager that you can take advantage of, more information about System Manager Capabilities Tasks Create IAM roles and permissions to enable Session Manager Create instances and install the SSM Agent Configure Systems Manager and enable manage on-premise systems Create IAM users and policy restrictions based on tags Configure logging Confirm appropriate access and review logs Task 1: Create IAM roles and permissions to enable Session Manager for Amazon EC2 Instances 1.If you are at an AWS Event where we are using EventEngine, go to Outputs section from your CloudFormation deployment, click on the URL next to the Cloud9IDE key. Otherwise, if this is not an AWS Event and EventEngine is not used, you can run the following commands from your laptop. 2.Create an instance profile: aws iam create-instance-profile --instance-profile-name SSMLabProfile 3.Create the json trust policy doc to attach to the IAM role. Create a new file with the following contents, save the file name: lab-role-trust-policy.json : { Version : 2012-10-17 , Statement : { Effect : Allow , Principal : { Service : ec2.amazonaws.com }, Action : sts:AssumeRole } } 4.Create an IAM role using the trust policy above: aws iam create-role --role-name SSMLabRole --assume-role-policy-document file://lab-role-trust-policy.json 5.Add the role to the instance profile: aws iam add-role-to-instance-profile --role-name SSMLabRole --instance-profile-name SSMLabProfile 6.Attach the existing EC2RoleSSMAccess to the newly created instance-profile: aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM --role-name SSMLabRole Attach the instance profile to the system. 1.Create the json trust policy doc to attach to the IAM role. Create a new file with the following contents, save the file name: ssmservice-trust-policy.json { Version : 2012-10-17 , Statement : { Effect : Allow , Principal : { Service : ssm.amazonaws.com }, Action : sts:AssumeRole } } 2.Create a new role named SSMServiceRole : aws iam create-role --role-name SSMServiceRole --assume-role-policy-document file://ssmservice-trust-policy.json 3.As a starting point, we will use AmazonSSMManagedInstanceCore grant permission for Systems Manager to interact with your instances. AmazonSSMManagedInstanceCore, enables an instance to use AWS Systems Manager service core functionality. Depending on your operations plan, you might need permissions represented in one or more of the other three policies. To view this policy in the console go to services, IAM, Access Management, Policies and search for the AmazonSSMManagedInstanceCore policy, click on the policy, view the permissions by clicking on the permissions tab. Now attach this policy to the role using attach-role-policy command. aws iam attach-role-policy --role-name SSMServiceRole --policy-arn arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore 4.Let's make sure we allow our on-premise systems to write to CloudWatchLogs so that we can use the same Audit and Logging tools to review administrative access. We'll use the same Attach-role-policy to attach a policy that enables the SSMServiceRole to write to CloudWatchLogs. aws iam attach-role-policy --role-name SSMServiceRole --policy-arn arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy Enable Session Manager to manage systems on-premise: The activation process provides an Activation Code and ID which functions like an access key ID and secret key to provide secure access to the Systems Manager service form your managed instances . Attention If you've been using the Cloud9IDE in this lab please continue to run these commands from there. 1.Open the command line, Create a managed-instance activation for your Dev instance, copy the \"activation-code\" and \"activation-id\" and label it as you DevOnPrem in your scratch pad, we will use it later. aws ssm create-activation --default-instance-name DevOnPrem --iam-role SSMServiceRole --registration-limit 10 --region us-east-1 2.Create a managed-instance activation for your Prod instance, copy the \"activation-code\" and \"activation-id\" and label it as you ProdOnPrem in your scratch pad, we will use it later. aws ssm create-activation --default-instance-name ProdOnPrem --iam-role SSMServiceRole --registration-limit 10 --region us-east-1 Store the managed-instance Activation Code and Activation ID in a safe place. You specify this Code and ID when you install SSM Agent on systems on-premise. The code and ID combination functions like an Amazon EC2 access key ID and secret key to provide secure access to the Systems Manager service from your managed instances . If you lose the Code and ID, you must create a new activation. An activation expiration is a window of time when you can register on-premises machines with Systems Manager, default is 24 hours. An expired activation has no impact on your servers or virtual machines (VMs) that you registered with Systems Manager. This means that if an activation expires then you can\u2019t register more servers or VMs with Systems Manager by using that specific activation. You simply need to create a new one. All of the servers and VMs that you registered will continue to be registered Systems Manager managed instances until you remove or disable SSM Agent on the server or VM and thereby unregister it. For more details: Task 2: Create instances and install the SSM Agent Please note that in order to create a mock on-premise system we will be creating and using a key-pair and not using them for the AWS EC2 instances. We do not need a key pair for the AWS EC2 instances because we are using Session Manager to gain direct access. Attention If you are using Cloud9, please perform the following on the Cloud9 instance. Create a key pair for SSH access to the on-premise systems. Follow the instructions for Creating a Key Pair Using Amazon EC2 here. Copy the name of your key pair to your scratch pad. Info What is a Key Pair? Amazon EC2 uses public key cryptography to encrypt and decrypt login information. Public key cryptography uses a public key to encrypt a piece of data, and then the recipient uses the private key to decrypt the data. The public and private keys are known as a key pair. Public key cryptography enables you to securely access your instances using a private key instead of a password. When you launch an instance, you specify the key pair. You can specify an existing key pair or a new key pair that you create at launch. At boot time, the public key content is placed on the instance in an entry within ~/.ssh/authorized_keys. To log in to your instance, you must specify the private key when you connect to the instance. 2.Go back to the CloudFormation Stack, find the stack that starts with \"aws-cloud9-\" click on Resources , copy the ID next to the InstanceSecurityGroup to a scratch pad. Now find the stack named \"InfrastructureIdentity-Env-Setup\", click on Resources , copy the ID next to PublicSubnet1 to the same scratch pad, you will need them for the following steps. Tip At this point, make sure you have captured 3 items on your scratch pad: The security group ID of the InstanceSecurityGroup The subnet ID of PublicSubnet1 The name of the key pair you created. 3.Build the production instance using the following cli command: Note : Replace \"subnet-xx\" with the PublicSubnet1 ID and replace \"sg-xx\" with the InstanceSecurityGroup ID from your scratch pad. aws ec2 run-instances --iam-instance-profile Name = SSMLabProfile --image-id ami-0080e4c5bc078760e --instance-type t1.micro --subnet-id subnet-xx --security-group-ids sg-xx --region us-east-1 --tag-specifications ResourceType=instance,Tags=[{Key= Name ,Value= ProdEC2Instance },{Key= Environment ,Value= Prod }] 4.Build the development instance using the following cli command: Note: Replace \"subnet-xx\" with the PublicSubnet1 ID and replace \"sg-xx\" with the InstanceSecurityGroup ID from your scratch pad. aws ec2 run-instances --iam-instance-profile Name = SSMLabProfile --image-id ami-0080e4c5bc078760e --instance-type t1.micro --subnet-id subnet-xx --security-group-ids sg-xx --region us-east-1 --tag-specifications ResourceType=instance,Tags=[{Key= Name ,Value= DevEC2Instance },{Key= Environment ,Value= Dev }] 5.Build a MOCK production on-premise instance using the following cli command: IMPORTANT: We are not assigning an Instance Profile as these instances will mock our on-premise servers. Note: Replace \"subnet-xx\" with the PublicSubnet1 ID, \"sg-xx\" with the InstanceSecurityGroup ID and \"keyname-xx\" with the key pair name from your scratch pad. aws ec2 run-instances --image-id ami-0080e4c5bc078760e --instance-type t1.micro --subnet-id subnet-xx --security-group-ids sg-xx --region us-east-1 --key-name keyname-xx --tag-specifications ResourceType=instance,Tags=[{Key= Name ,Value= ProdOnPrem },{Key= Environment ,Value= Prod }] 6.Build the MOCK on-premise development instance using the following cli command: IMPORTANT: We are not assigning an Instance Profile as these instances will mock our hybrid servers. Please use your own key-pair . Note: Replace \"subnet-xx\" with the PublicSubnet1 ID, \"sg-xx\" with the InstanceSecurityGroup ID and \"keyname-xx\" with the key pair name from your scratch pad. aws ec2 run-instances --image-id ami-0080e4c5bc078760e --instance-type t1.micro --subnet-id subnet-xx --security-group-ids sg-xx --region us-east-1 --key-name keyname-xx --tag-specifications ResourceType=instance,Tags=[{Key= Name ,Value= DevOnPrem },{Key= Environment ,Value= Dev }] 8.From your Cloud9 instance use the ssh command to connect to DevOnPrem instance. You specify the path and file name of the private key (.pem), the user name for your AMI, and the private ip address for the instance. Additionally, you will need the private IPv4 address for your instance using the Amazon EC2 console. From the Amazon EC2 console check the box next to the DevOnPrem instance, a menu with details including the Private IPs will show on the bottom of the screen, copy the Private IP address associated to your DevOnPrem instance and use it below. Note: Replace my-key-pair.pem with the name of the key-pair you created, this should be in your scratch pad. And replace 172.16.x.x with the Private IP associated with the DevOnPrem instance. ssh -i /path/my-key-pair.pem ec2-user@172.16.x.x Then run the following commands to install SSM. Note: Replace \"activation-code\" and \"activation-id\" for the DevOnPrem instance with the code and id on your scratch pad. sudo yum update -Y mkdir /tmp/ssm curl https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm -o /tmp/ssm/amazon-ssm-agent.rpm sudo yum install -y /tmp/ssm/amazon-ssm-agent.rpm sudo stop amazon-ssm-agent sudo amazon-ssm-agent -register -code activation-code -id activation-id -region us-east-1 sudo start amazon-ssm-agent 10.From your Cloud9 instance use the ssh command to connect to ProdOnPrem instance. You specify the path and file name of the private key (.pem), the user name for your AMI, and the private ip address for the instance. Additionally, you will need the private IPv4 address for your instance using the Amazon EC2 console. From the Amazon EC2 console check the box next to the ProdOnPrem instance, a menu with details including the Private IPs will show on the bottom of the screen, copy the Private IP address associated to your OnPrem instance and use it below. Note: Replace my-key-pair.pem with the name of the key-pair you created, this should be in your scratch pad. And replace 172.16.x.x with the Private IP associated with the ProdOnPrem instance. ssh -i /path/my-key-pair.pem ec2-user@172.16.x.x Then run the following commands to install SSM. Note: Replace \"activation-code\" and \"activation-id\" with the code and id on your scratch pad. sudo yum update -Y mkdir /tmp/ssm curl https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm -o /tmp/ssm/amazon-ssm-agent.rpm sudo yum install -y /tmp/ssm/amazon-ssm-agent.rpm sudo stop amazon-ssm-agent sudo amazon-ssm-agent -register -code activation-code -id activation-id -region us-east-1 sudo start amazon-ssm-agent exit Attention DON\u2019T Forget the last command above, this command start the ssm agent after activation - sudo start amazon-ssm-agent Task 3: Configure Systems Manager to enable management of on-premise systems In order to use Session Manager to connect to on-premises systems SSM needs to be configured for advanced-instances tier. To enable the advanced-instances tier: 1.Open the AWS Systems Manager console 2.In the navigation pane, choose managed instances . 3.Choose the Settings tab. 4.Choose Change account setting . 5.Review the information in the pop-up about changing account settings, and then, if you approve, choose the option to accept and click Change setting . NOTE: The system can take several minutes to complete the process of moving all instances from the standard-instances tier to the advanced-instances tier. 6.Select managed instances You should now see a new Advanced Instances label next to the managed instances Heading and you can now manage on-premise systems. Task 4: Create IAM users and policy restrictions based on tags NOTE: The following steps require full access to IAM. 1.If you started this lab using Cloud9, c0ontinue to run the following commands from your Cloud9 session, use the create-user command to create the user. aws iam create-user --user-name MyWorkshopUser 2.Create your own and assign a password to the user by replacing the '######' symbols with that password. Please ensure you use a complex password. aws iam create-login-profile --user-name MyWorkshopUser --password ###### 3.Now we will create and attach an IAM Custom Policy to MyWorkshopUser. Create a new file with the following contents, save the file name: SSMDevAccess.json This file must reside in the same directory where your CLI session is running, or you must specify the location. { Version : 2012-10-17 , Statement : [ { Effect : Allow , Action : [ ssm:DescribeSessions , ssm:GetConnectionStatus , ssm:DescribeInstanceProperties , ec2:DescribeInstances , ssm:StartSession ] , Resource : * } , { Sid : ReadAlltheSSMThings , Effect : Allow , Action : [ ssm:Get* , ssm:Describe* , ssm:List* ] , Resource : * } , { Sid : SameUserTerminate , Effect : Allow , Action : ssm:TerminateSession , Resource : arn:aws:ssm:*:*:session/ ${ aws : username } -* } , { Sid : DenySMtoProd , Effect : Deny , Action : ssm:StartSession , Resource : [ arn:aws:ec2:*:*:instance/* ] , Condition : { StringLike : { ssm:resourceTag/Environment : Prod } } } ] } 4.Create the IAM policy using the file you just created aws iam create-policy --policy-name SSMDevAccess --policy-document file://SSMDevAccess.json The result should return the following: { Policy : { PolicyName : SSMDevAccess , PolicyId : ANPAJIFY55FF57L6ZEHKO , Arn : arn:aws:iam::123456789012:policy/SSMDevAccess , Path : / , DefaultVersionId : v1 , AttachmentCount : 0, PermissionsBoundaryUsageCount : 0, IsAttachable : true, CreateDate : 2019-03-21T20:51:21Z , UpdateDate : 2019-03-21T20:51:21Z } } 5.Copy the Account ID to your scratch pad, you will need it for the next instruction. You can find the AWS Account ID located in an IAM policy ARN, between \"iam\" and \"policy\", do not include the : symbols i.e. the AWS Account ID is 123456789012 given the following ARN \"Arn\": arn:aws:iam::123456789012:policy/SSMDevAccess . 6.To attach the policy, use the attach-user-policy command, and reference the environment variable that holds the policy ARN. aws iam attach-user-policy --user-name MyWorkshopUser --policy-arn arn:aws:iam::123456789012:policy/SSMDevAccess 7.Let's attach a policy that allows our workshop user to view the logs in CloudWatch. aws iam attach-user-policy --user-name MyWorkshopUser --policy-arn arn:aws:iam::aws:policy/CloudWatchLogsReadOnlyAccess 8.Let's attach a policy that allows our workshop user to view the events in CloudTrail. aws iam attach-user-policy --user-name MyWorkshopUser --policy-arn arn:aws:iam::aws:policy/CloudWatchEventsReadOnlyAccess 9.Verify that the policy is attached to the user by running the list-attached-user-policies command. aws iam list-attached-user-policies --user-name MyWorkshopUser The result should return the following: { AttachedPolicies : [ { PolicyName : SSMDevAccess , PolicyArn : arn:aws:iam::aws:policy/SSMDevAccess } ] } Task 5: Configure Logging Session Manager provides you with options for auditing and logging session activity in your AWS account. This allows you to do the following: Create and store session logs for archival purposes. Generate a report showing details of every connection made to your instances using Session Manager over the past 30 days. Generate notifications of session activity in your AWS account, such as Amazon Simple Notification Service (Amazon SNS) notifications. Automatically initiate another action on an AWS resource as the result of session activity, such as running an AWS Lambda function, starting an AWS CodePipeline pipeline, or running an AWS Systems Manager Run Command document. We will log session data using Amazon CloudWatch Logs, archive session logs to Amazon S3 and generate access reports. To setup Session Manager logging in Amazon CloudWatch Logs, open the CloudWatch Console . In the navigation pane, choose Logs Choose Actions, Create log group. Type in the following name for the log group \"SSM-Logs\" Now open the AWS Systems Manager console . In the navigation pane, choose Session Manager Select Configure Preferences You have several configurations options, including: Specify Operating System user for session Enable KMS encryption for active sessions Write session output to an S3 bucket Send session output to CloudWatch Logs Select the check box next to CloudWatch Logs . Select Choose a log group name from the list specify the CloudWatch Logs group you created SSM-Logs and select Save . Additionally, you can view ssm-agent logs on the instance here: /var/log/amazon/ssm/amazon-ssm-agent.log /var/log/amazon/ssm/errors.log Task 6: Confirm appropriate access and review logs 1.Logout of the AWS Management Console session or Open a different browser. Sign into the AWS account as MyWorkshopUser with the password you created earlier. Go to the AWS Systems Manager console . In the navigation pane, choose Session Manager 2.Click Start session , select the ProdOnPrem name, click on start Session and a new session windows should open for you. This demonstrates that you can manage on-premise systems with Session Manager. 3.In the Session Manager session type the following: whoami The result should return the following: ssm-user 3.Click Terminate to end. 4.Repeat the steps above with the DevSSM instance. You should find the same results, the result should return the following: ssm-user 5.Click Terminate to end. 6.Now try the ProdSSM instance, click start Session. The result should return the following: 7.Go to the AWS Systems Manager , click on Session Manager , click on Session History . Your sessions should show up as Terminated or Terminating. Once the session has terminated you will see a link to CloudWatch Logs . Click on it to view the audit logs of your session. CloudWatch Logs will show details of the session such as commands that were run on the host. These logs can also be stored in S3 for you. 8.If you have CloudTrail enabled, you can view the Session Manager events in CloudTrail as well however you must be login as the administrator not MyWorkshopUser. Go to CloudTrail and find the Event name StartSession to view the details of your Session Manager session that CloudTrail captures. You Should see something like this: Troubleshooting \u2022 If your on-premises instances are showing offline, make sure the ssm-agent was re-started after the SSM activation process.","title":"Module 2: Session Manager"},{"location":"02-using-AWS-Systems-Manager-Session-Manager/#module-2-session-manager-30-minutes","text":"We were given the task to setup secure administrative access to our instances but we know that anytime someone logs into a server changes can be made and those changes could inadvertently affect the security of the host. Instead of hoping our system security doesn't change, let's change the access pattern and restrict all access into production systems. This approach to administrative access is called Immutable Infrastructure , which includes managing services and software deployments on IT resources wherein components are replaced rather than changed. An application or services is effectively redeployed each time any change occurs. Given this is a new access pattern for our team, we will continue to allow access to our development systems. Using Amazon Systems Manager Session Manager and AWS IAM with tag based permissions we will implement this exact scenario and review the audit logs. In this Module we will create IAM roles with permissions to enable Session Manager access. Additionally, we are going to deploy 4 systems: AWS EC2 Instance tagged with development AWS EC2 Instance tagged with production Mock on-premise system tagged with development Mock on-premise system tagged with production Please note our mock on-premise systems will be EC2 instances, however we will treat them like on-premise systems by not assigning an Instance Profile. Terminology A managed instance is any machine configured for AWS Systems Manager. You can configure Amazon EC2 instances or on-premises machines in a hybrid environment as a managed instance . Systems Manager supports various distributions of Linux, including Raspberry Pi devices, and Microsoft Windows Server. In the AWS Management Console, any machine prefixed with \"mi-\" is an on-premises server or virtual machine (VM) managed instance . AWS Systems Manager offers a standard-instances tier and an advanced-instances tier for servers and VMs in your hybrid environment. Advanced instances also enable you to connect to your hybrid machines by using AWS Systems Manager Session Manager. Session Manager provides interactive shell access to your instances. While this lab focuses on Session Manager which is a capability of AWS Systems Manager there are several other capabilities of AWS Systems Manager that you can take advantage of, more information about System Manager Capabilities","title":"Module 2: Session Manager ~ 30 minutes"},{"location":"02-using-AWS-Systems-Manager-Session-Manager/#tasks","text":"Create IAM roles and permissions to enable Session Manager Create instances and install the SSM Agent Configure Systems Manager and enable manage on-premise systems Create IAM users and policy restrictions based on tags Configure logging Confirm appropriate access and review logs","title":"Tasks"},{"location":"02-using-AWS-Systems-Manager-Session-Manager/#task-1-create-iam-roles-and-permissions-to-enable-session-manager-for-amazon-ec2-instances","text":"1.If you are at an AWS Event where we are using EventEngine, go to Outputs section from your CloudFormation deployment, click on the URL next to the Cloud9IDE key. Otherwise, if this is not an AWS Event and EventEngine is not used, you can run the following commands from your laptop. 2.Create an instance profile: aws iam create-instance-profile --instance-profile-name SSMLabProfile 3.Create the json trust policy doc to attach to the IAM role. Create a new file with the following contents, save the file name: lab-role-trust-policy.json : { Version : 2012-10-17 , Statement : { Effect : Allow , Principal : { Service : ec2.amazonaws.com }, Action : sts:AssumeRole } } 4.Create an IAM role using the trust policy above: aws iam create-role --role-name SSMLabRole --assume-role-policy-document file://lab-role-trust-policy.json 5.Add the role to the instance profile: aws iam add-role-to-instance-profile --role-name SSMLabRole --instance-profile-name SSMLabProfile 6.Attach the existing EC2RoleSSMAccess to the newly created instance-profile: aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM --role-name SSMLabRole Attach the instance profile to the system. 1.Create the json trust policy doc to attach to the IAM role. Create a new file with the following contents, save the file name: ssmservice-trust-policy.json { Version : 2012-10-17 , Statement : { Effect : Allow , Principal : { Service : ssm.amazonaws.com }, Action : sts:AssumeRole } } 2.Create a new role named SSMServiceRole : aws iam create-role --role-name SSMServiceRole --assume-role-policy-document file://ssmservice-trust-policy.json 3.As a starting point, we will use AmazonSSMManagedInstanceCore grant permission for Systems Manager to interact with your instances. AmazonSSMManagedInstanceCore, enables an instance to use AWS Systems Manager service core functionality. Depending on your operations plan, you might need permissions represented in one or more of the other three policies. To view this policy in the console go to services, IAM, Access Management, Policies and search for the AmazonSSMManagedInstanceCore policy, click on the policy, view the permissions by clicking on the permissions tab. Now attach this policy to the role using attach-role-policy command. aws iam attach-role-policy --role-name SSMServiceRole --policy-arn arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore 4.Let's make sure we allow our on-premise systems to write to CloudWatchLogs so that we can use the same Audit and Logging tools to review administrative access. We'll use the same Attach-role-policy to attach a policy that enables the SSMServiceRole to write to CloudWatchLogs. aws iam attach-role-policy --role-name SSMServiceRole --policy-arn arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy Enable Session Manager to manage systems on-premise: The activation process provides an Activation Code and ID which functions like an access key ID and secret key to provide secure access to the Systems Manager service form your managed instances . Attention If you've been using the Cloud9IDE in this lab please continue to run these commands from there. 1.Open the command line, Create a managed-instance activation for your Dev instance, copy the \"activation-code\" and \"activation-id\" and label it as you DevOnPrem in your scratch pad, we will use it later. aws ssm create-activation --default-instance-name DevOnPrem --iam-role SSMServiceRole --registration-limit 10 --region us-east-1 2.Create a managed-instance activation for your Prod instance, copy the \"activation-code\" and \"activation-id\" and label it as you ProdOnPrem in your scratch pad, we will use it later. aws ssm create-activation --default-instance-name ProdOnPrem --iam-role SSMServiceRole --registration-limit 10 --region us-east-1 Store the managed-instance Activation Code and Activation ID in a safe place. You specify this Code and ID when you install SSM Agent on systems on-premise. The code and ID combination functions like an Amazon EC2 access key ID and secret key to provide secure access to the Systems Manager service from your managed instances . If you lose the Code and ID, you must create a new activation. An activation expiration is a window of time when you can register on-premises machines with Systems Manager, default is 24 hours. An expired activation has no impact on your servers or virtual machines (VMs) that you registered with Systems Manager. This means that if an activation expires then you can\u2019t register more servers or VMs with Systems Manager by using that specific activation. You simply need to create a new one. All of the servers and VMs that you registered will continue to be registered Systems Manager managed instances until you remove or disable SSM Agent on the server or VM and thereby unregister it. For more details:","title":"Task 1: Create IAM roles and permissions to enable Session Manager for Amazon EC2 Instances"},{"location":"02-using-AWS-Systems-Manager-Session-Manager/#task-2-create-instances-and-install-the-ssm-agent","text":"Please note that in order to create a mock on-premise system we will be creating and using a key-pair and not using them for the AWS EC2 instances. We do not need a key pair for the AWS EC2 instances because we are using Session Manager to gain direct access. Attention If you are using Cloud9, please perform the following on the Cloud9 instance. Create a key pair for SSH access to the on-premise systems. Follow the instructions for Creating a Key Pair Using Amazon EC2 here. Copy the name of your key pair to your scratch pad. Info What is a Key Pair? Amazon EC2 uses public key cryptography to encrypt and decrypt login information. Public key cryptography uses a public key to encrypt a piece of data, and then the recipient uses the private key to decrypt the data. The public and private keys are known as a key pair. Public key cryptography enables you to securely access your instances using a private key instead of a password. When you launch an instance, you specify the key pair. You can specify an existing key pair or a new key pair that you create at launch. At boot time, the public key content is placed on the instance in an entry within ~/.ssh/authorized_keys. To log in to your instance, you must specify the private key when you connect to the instance. 2.Go back to the CloudFormation Stack, find the stack that starts with \"aws-cloud9-\" click on Resources , copy the ID next to the InstanceSecurityGroup to a scratch pad. Now find the stack named \"InfrastructureIdentity-Env-Setup\", click on Resources , copy the ID next to PublicSubnet1 to the same scratch pad, you will need them for the following steps. Tip At this point, make sure you have captured 3 items on your scratch pad: The security group ID of the InstanceSecurityGroup The subnet ID of PublicSubnet1 The name of the key pair you created. 3.Build the production instance using the following cli command: Note : Replace \"subnet-xx\" with the PublicSubnet1 ID and replace \"sg-xx\" with the InstanceSecurityGroup ID from your scratch pad. aws ec2 run-instances --iam-instance-profile Name = SSMLabProfile --image-id ami-0080e4c5bc078760e --instance-type t1.micro --subnet-id subnet-xx --security-group-ids sg-xx --region us-east-1 --tag-specifications ResourceType=instance,Tags=[{Key= Name ,Value= ProdEC2Instance },{Key= Environment ,Value= Prod }] 4.Build the development instance using the following cli command: Note: Replace \"subnet-xx\" with the PublicSubnet1 ID and replace \"sg-xx\" with the InstanceSecurityGroup ID from your scratch pad. aws ec2 run-instances --iam-instance-profile Name = SSMLabProfile --image-id ami-0080e4c5bc078760e --instance-type t1.micro --subnet-id subnet-xx --security-group-ids sg-xx --region us-east-1 --tag-specifications ResourceType=instance,Tags=[{Key= Name ,Value= DevEC2Instance },{Key= Environment ,Value= Dev }] 5.Build a MOCK production on-premise instance using the following cli command: IMPORTANT: We are not assigning an Instance Profile as these instances will mock our on-premise servers. Note: Replace \"subnet-xx\" with the PublicSubnet1 ID, \"sg-xx\" with the InstanceSecurityGroup ID and \"keyname-xx\" with the key pair name from your scratch pad. aws ec2 run-instances --image-id ami-0080e4c5bc078760e --instance-type t1.micro --subnet-id subnet-xx --security-group-ids sg-xx --region us-east-1 --key-name keyname-xx --tag-specifications ResourceType=instance,Tags=[{Key= Name ,Value= ProdOnPrem },{Key= Environment ,Value= Prod }] 6.Build the MOCK on-premise development instance using the following cli command: IMPORTANT: We are not assigning an Instance Profile as these instances will mock our hybrid servers. Please use your own key-pair . Note: Replace \"subnet-xx\" with the PublicSubnet1 ID, \"sg-xx\" with the InstanceSecurityGroup ID and \"keyname-xx\" with the key pair name from your scratch pad. aws ec2 run-instances --image-id ami-0080e4c5bc078760e --instance-type t1.micro --subnet-id subnet-xx --security-group-ids sg-xx --region us-east-1 --key-name keyname-xx --tag-specifications ResourceType=instance,Tags=[{Key= Name ,Value= DevOnPrem },{Key= Environment ,Value= Dev }] 8.From your Cloud9 instance use the ssh command to connect to DevOnPrem instance. You specify the path and file name of the private key (.pem), the user name for your AMI, and the private ip address for the instance. Additionally, you will need the private IPv4 address for your instance using the Amazon EC2 console. From the Amazon EC2 console check the box next to the DevOnPrem instance, a menu with details including the Private IPs will show on the bottom of the screen, copy the Private IP address associated to your DevOnPrem instance and use it below. Note: Replace my-key-pair.pem with the name of the key-pair you created, this should be in your scratch pad. And replace 172.16.x.x with the Private IP associated with the DevOnPrem instance. ssh -i /path/my-key-pair.pem ec2-user@172.16.x.x Then run the following commands to install SSM. Note: Replace \"activation-code\" and \"activation-id\" for the DevOnPrem instance with the code and id on your scratch pad. sudo yum update -Y mkdir /tmp/ssm curl https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm -o /tmp/ssm/amazon-ssm-agent.rpm sudo yum install -y /tmp/ssm/amazon-ssm-agent.rpm sudo stop amazon-ssm-agent sudo amazon-ssm-agent -register -code activation-code -id activation-id -region us-east-1 sudo start amazon-ssm-agent 10.From your Cloud9 instance use the ssh command to connect to ProdOnPrem instance. You specify the path and file name of the private key (.pem), the user name for your AMI, and the private ip address for the instance. Additionally, you will need the private IPv4 address for your instance using the Amazon EC2 console. From the Amazon EC2 console check the box next to the ProdOnPrem instance, a menu with details including the Private IPs will show on the bottom of the screen, copy the Private IP address associated to your OnPrem instance and use it below. Note: Replace my-key-pair.pem with the name of the key-pair you created, this should be in your scratch pad. And replace 172.16.x.x with the Private IP associated with the ProdOnPrem instance. ssh -i /path/my-key-pair.pem ec2-user@172.16.x.x Then run the following commands to install SSM. Note: Replace \"activation-code\" and \"activation-id\" with the code and id on your scratch pad. sudo yum update -Y mkdir /tmp/ssm curl https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm -o /tmp/ssm/amazon-ssm-agent.rpm sudo yum install -y /tmp/ssm/amazon-ssm-agent.rpm sudo stop amazon-ssm-agent sudo amazon-ssm-agent -register -code activation-code -id activation-id -region us-east-1 sudo start amazon-ssm-agent exit Attention DON\u2019T Forget the last command above, this command start the ssm agent after activation - sudo start amazon-ssm-agent","title":"Task 2: Create instances and install the SSM Agent"},{"location":"02-using-AWS-Systems-Manager-Session-Manager/#task-3-configure-systems-manager-to-enable-management-of-on-premise-systems","text":"In order to use Session Manager to connect to on-premises systems SSM needs to be configured for advanced-instances tier. To enable the advanced-instances tier: 1.Open the AWS Systems Manager console 2.In the navigation pane, choose managed instances . 3.Choose the Settings tab. 4.Choose Change account setting . 5.Review the information in the pop-up about changing account settings, and then, if you approve, choose the option to accept and click Change setting . NOTE: The system can take several minutes to complete the process of moving all instances from the standard-instances tier to the advanced-instances tier. 6.Select managed instances You should now see a new Advanced Instances label next to the managed instances Heading and you can now manage on-premise systems.","title":"Task 3: Configure Systems Manager to enable management of on-premise systems"},{"location":"02-using-AWS-Systems-Manager-Session-Manager/#task-4-create-iam-users-and-policy-restrictions-based-on-tags","text":"NOTE: The following steps require full access to IAM. 1.If you started this lab using Cloud9, c0ontinue to run the following commands from your Cloud9 session, use the create-user command to create the user. aws iam create-user --user-name MyWorkshopUser 2.Create your own and assign a password to the user by replacing the '######' symbols with that password. Please ensure you use a complex password. aws iam create-login-profile --user-name MyWorkshopUser --password ###### 3.Now we will create and attach an IAM Custom Policy to MyWorkshopUser. Create a new file with the following contents, save the file name: SSMDevAccess.json This file must reside in the same directory where your CLI session is running, or you must specify the location. { Version : 2012-10-17 , Statement : [ { Effect : Allow , Action : [ ssm:DescribeSessions , ssm:GetConnectionStatus , ssm:DescribeInstanceProperties , ec2:DescribeInstances , ssm:StartSession ] , Resource : * } , { Sid : ReadAlltheSSMThings , Effect : Allow , Action : [ ssm:Get* , ssm:Describe* , ssm:List* ] , Resource : * } , { Sid : SameUserTerminate , Effect : Allow , Action : ssm:TerminateSession , Resource : arn:aws:ssm:*:*:session/ ${ aws : username } -* } , { Sid : DenySMtoProd , Effect : Deny , Action : ssm:StartSession , Resource : [ arn:aws:ec2:*:*:instance/* ] , Condition : { StringLike : { ssm:resourceTag/Environment : Prod } } } ] } 4.Create the IAM policy using the file you just created aws iam create-policy --policy-name SSMDevAccess --policy-document file://SSMDevAccess.json The result should return the following: { Policy : { PolicyName : SSMDevAccess , PolicyId : ANPAJIFY55FF57L6ZEHKO , Arn : arn:aws:iam::123456789012:policy/SSMDevAccess , Path : / , DefaultVersionId : v1 , AttachmentCount : 0, PermissionsBoundaryUsageCount : 0, IsAttachable : true, CreateDate : 2019-03-21T20:51:21Z , UpdateDate : 2019-03-21T20:51:21Z } } 5.Copy the Account ID to your scratch pad, you will need it for the next instruction. You can find the AWS Account ID located in an IAM policy ARN, between \"iam\" and \"policy\", do not include the : symbols i.e. the AWS Account ID is 123456789012 given the following ARN \"Arn\": arn:aws:iam::123456789012:policy/SSMDevAccess . 6.To attach the policy, use the attach-user-policy command, and reference the environment variable that holds the policy ARN. aws iam attach-user-policy --user-name MyWorkshopUser --policy-arn arn:aws:iam::123456789012:policy/SSMDevAccess 7.Let's attach a policy that allows our workshop user to view the logs in CloudWatch. aws iam attach-user-policy --user-name MyWorkshopUser --policy-arn arn:aws:iam::aws:policy/CloudWatchLogsReadOnlyAccess 8.Let's attach a policy that allows our workshop user to view the events in CloudTrail. aws iam attach-user-policy --user-name MyWorkshopUser --policy-arn arn:aws:iam::aws:policy/CloudWatchEventsReadOnlyAccess 9.Verify that the policy is attached to the user by running the list-attached-user-policies command. aws iam list-attached-user-policies --user-name MyWorkshopUser The result should return the following: { AttachedPolicies : [ { PolicyName : SSMDevAccess , PolicyArn : arn:aws:iam::aws:policy/SSMDevAccess } ] }","title":"Task 4: Create IAM users and policy restrictions based on tags"},{"location":"02-using-AWS-Systems-Manager-Session-Manager/#task-5-configure-logging","text":"Session Manager provides you with options for auditing and logging session activity in your AWS account. This allows you to do the following: Create and store session logs for archival purposes. Generate a report showing details of every connection made to your instances using Session Manager over the past 30 days. Generate notifications of session activity in your AWS account, such as Amazon Simple Notification Service (Amazon SNS) notifications. Automatically initiate another action on an AWS resource as the result of session activity, such as running an AWS Lambda function, starting an AWS CodePipeline pipeline, or running an AWS Systems Manager Run Command document. We will log session data using Amazon CloudWatch Logs, archive session logs to Amazon S3 and generate access reports. To setup Session Manager logging in Amazon CloudWatch Logs, open the CloudWatch Console . In the navigation pane, choose Logs Choose Actions, Create log group. Type in the following name for the log group \"SSM-Logs\" Now open the AWS Systems Manager console . In the navigation pane, choose Session Manager Select Configure Preferences You have several configurations options, including: Specify Operating System user for session Enable KMS encryption for active sessions Write session output to an S3 bucket Send session output to CloudWatch Logs Select the check box next to CloudWatch Logs . Select Choose a log group name from the list specify the CloudWatch Logs group you created SSM-Logs and select Save . Additionally, you can view ssm-agent logs on the instance here: /var/log/amazon/ssm/amazon-ssm-agent.log /var/log/amazon/ssm/errors.log","title":"Task 5: Configure Logging"},{"location":"02-using-AWS-Systems-Manager-Session-Manager/#task-6-confirm-appropriate-access-and-review-logs","text":"1.Logout of the AWS Management Console session or Open a different browser. Sign into the AWS account as MyWorkshopUser with the password you created earlier. Go to the AWS Systems Manager console . In the navigation pane, choose Session Manager 2.Click Start session , select the ProdOnPrem name, click on start Session and a new session windows should open for you. This demonstrates that you can manage on-premise systems with Session Manager. 3.In the Session Manager session type the following: whoami The result should return the following: ssm-user 3.Click Terminate to end. 4.Repeat the steps above with the DevSSM instance. You should find the same results, the result should return the following: ssm-user 5.Click Terminate to end. 6.Now try the ProdSSM instance, click start Session. The result should return the following: 7.Go to the AWS Systems Manager , click on Session Manager , click on Session History . Your sessions should show up as Terminated or Terminating. Once the session has terminated you will see a link to CloudWatch Logs . Click on it to view the audit logs of your session. CloudWatch Logs will show details of the session such as commands that were run on the host. These logs can also be stored in S3 for you. 8.If you have CloudTrail enabled, you can view the Session Manager events in CloudTrail as well however you must be login as the administrator not MyWorkshopUser. Go to CloudTrail and find the Event name StartSession to view the details of your Session Manager session that CloudTrail captures. You Should see something like this:","title":"Task 6: Confirm appropriate access and review logs"},{"location":"02-using-AWS-Systems-Manager-Session-Manager/#troubleshooting","text":"\u2022 If your on-premises instances are showing offline, make sure the ssm-agent was re-started after the SSM activation process.","title":"Troubleshooting"},{"location":"03-using-EC2-Instance-Connect/","text":"Module 3: Using Amazon EC2 Instance Connect In the last module you used AWS Systems Manager Session Manager to securely access and administer your on-premise systems and Amazon EC2 Instances. Recently we announced a new feature that can be used for secure administration of EC2 Instances called Amazon EC2 Instance Connect. Amazon EC2 Instance Connect provides a simple and secure way to connect to your instances using Secure Shell (SSH). With EC2 Instance Connect, you use AWS Identity and Access Management (IAM) policies and principals to control SSH access to your instances, removing the need to share and manage SSH keys. When you connect to an instance using EC2 Instance Connect, the Instance Connect API pushes a one-time-use SSH public key to the instance metadata where it remains for 60 seconds. The IAM policy attached to your IAM user authorizes your IAM user to push the public key to the instance metadata. The AuthorizedKeysCommand and AuthorizedKeysCommandUser, configured when Instance Connect is installed, tells the SSH daemon to look up the public key from the instance metadata for authentication, and connects you to the instance. You can use Instance Connect to connect to your instances using any SSH client of your choice or the Instance Connect CLI, or you can connect to your instances by using the new browser-based SSH client in the Amazon EC2 console. More Information and a list of currently supported Operating Systems Build an EC2 Instance and install the EC2 Instance Connect client. EC2 Instance connect is already installed on all version of Amazon Linux 2, however we will use Ubuntu Server and install the client so we can become familiar with the process. 1.This lab will be executed from your Cloud9IDE. Go to Outputs tab from your InfrastructureIdentity-Env-Setup CloudFormation stack, and click on the value next to Cloud9IDE. Make sure your credentials are still in place on the Cloud9IDE, for additional details follow quickly configuring the AWS CLI You may need to disable AWS managed temporary credentials in Cloud9 Preference, AWS Settings, Credentials. 2.Go back to CloudFormation , find the stack that starts with aws-cloud9- , click on Resources and take note Security Group ID (sg-abc123) for InstanceSecurityGroup . Next, find the CloudFormation Stack named InfrastructureIdentity-Env-Setup , click on Resources and take note of the subnet-id (subnet-abc123) for PublicSubnet1 , you will use these in steps 3-6. 3.Create a text file named connect-install.txt, using the following contents: #!/bin/bash apt-get update apt-get install ec 2 -instance-connect less /lib/systemd/system/ssh.service.d/ec 2 -instance-connect.conf 4.The following command will build an Ubuntu instance with EC2-Instance-Connect installed using user-data, using the Security Group ID and Public Subnet created for us earlier, using the following cli command: Before you run the command below remove all quotes and replace \"subnet-xx\" and \"sg-xx\" with the information from the previous step and your SSH key. aws ec2 run-instances --image-id ami-026c8acd92718196b --instance-type t1.micro --subnet-id subnet-xx --security-group-ids sg-xx --region us-east-1 --associate-public-ip-address --tag-specifications ResourceType=instance,Tags={Key= Name ,Value= EC2ConnectInstance } --user-data file://connect-install.txt 5.You will see the output that includes details about the instance you just created. Take note of the instance-id as we will use it in the next section. InstanceId : i-000abcdefghijklmn , 6.Update the Cloud9 security group named aws-cloud9-InfrastructureIdentity-Env-Setup-Cloud9Instance- to allow inbound SSH from 0.0.0.0/0 . IAM roles and permissions to enable EC2 Instance Connect 1.Now we will create and attach an IAM Customer Managed Policy to MyWorkshopUser. Create a new file with the following contents but Replace the \"i-xx\" with the instance-id that you noted earlier, save the file name: InstanceConnect.json This file must reside in the same directory where your CLI session is running, or you must specify the location. { Version : 2012-10-17 , Statement : [{ Effect : Allow , Action : ec2-instance-connect:SendSSHPublicKey , Resource : arn:aws:ec2:region:account-id:instance/i-xx , Condition : { StringEquals : { ec2:osuser : ubuntu } } }] } The ec2-instance-connect:SendSSHPublicKey action grants an IAM user permission to push the public key to an instance. The ec2:osuser condition specifies the default user name for the AMI that you used to launch your instance. For Amazon Linux 2, the default user name is ec2-user. For the Ubuntu AMI, the default user name is ubuntu. 2.Create the IAM policy using the file you just created aws iam create-policy --policy-name InstanceConnect --policy-document file://InstanceConnect.json The result should return the following: { Policy : { PolicyName : InstanceConnect , PermissionsBoundaryUsageCount : 0 , CreateDate : 2019-07-23T19:58:59Z , AttachmentCount : 0 , IsAttachable : true , PolicyId : ANPAXMAS344KJ6Q7CGW4F , DefaultVersionId : v1 , Path : / , Arn : arn:aws:iam::abc123:policy/InstanceConnect , UpdateDate : 2019-07-23T19:58:59Z } } This above command will output a policy ARN for the policy we just created. Copy this ARN from the prior output and replace it in the next command. 3.To attach the policy, use the attach-user-policy command, and use the policy ARN output from above. aws iam attach-user-policy --user-name MyWorkshopUser --policy-arn arn:aws:iam::abc123:policy/InstanceConnect Confirm Access 1.Now using a different browser or sign out of the AWS Management Console and sign back in as MyWorkshopUser. 2.Go to EC2 , select Instances , select the EC2ConnectInstance . Select Connect and choose the option to connect with EC2 Instance Connect (browser-based SSH connection) . Update the user name to ubuntu . EC2 Instance Connect performs the following three actions in one call: it generates a one-time-use SSH public key, pushes the key to the instance where it remains for 60 seconds, and connects the user to the instance. You can use basic SSH/SFTP commands with the Instance Connect CLI. 3.You should see the EC2 Instance Connect (browser-based SSH connection) appear. The command \u201cw\u201d displays the detailed information about the users who are logged in the system currently. The simple \u201cdate\u201d command displays the current date and time (including the day of the week, month, time, time zone, year). Enter in the following commands: w date The results should look similar to this: 4.Now that you've seen how Session Manager and EC2 Instance Connect work. What do you think? What are the Pros Cons for using each? What is your preference?","title":"Module 3: EC2 Instance Connect"},{"location":"03-using-EC2-Instance-Connect/#module-3-using-amazon-ec2-instance-connect","text":"In the last module you used AWS Systems Manager Session Manager to securely access and administer your on-premise systems and Amazon EC2 Instances. Recently we announced a new feature that can be used for secure administration of EC2 Instances called Amazon EC2 Instance Connect. Amazon EC2 Instance Connect provides a simple and secure way to connect to your instances using Secure Shell (SSH). With EC2 Instance Connect, you use AWS Identity and Access Management (IAM) policies and principals to control SSH access to your instances, removing the need to share and manage SSH keys. When you connect to an instance using EC2 Instance Connect, the Instance Connect API pushes a one-time-use SSH public key to the instance metadata where it remains for 60 seconds. The IAM policy attached to your IAM user authorizes your IAM user to push the public key to the instance metadata. The AuthorizedKeysCommand and AuthorizedKeysCommandUser, configured when Instance Connect is installed, tells the SSH daemon to look up the public key from the instance metadata for authentication, and connects you to the instance. You can use Instance Connect to connect to your instances using any SSH client of your choice or the Instance Connect CLI, or you can connect to your instances by using the new browser-based SSH client in the Amazon EC2 console. More Information and a list of currently supported Operating Systems","title":"Module 3: Using Amazon EC2 Instance Connect"},{"location":"03-using-EC2-Instance-Connect/#build-an-ec2-instance-and-install-the-ec2-instance-connect-client","text":"EC2 Instance connect is already installed on all version of Amazon Linux 2, however we will use Ubuntu Server and install the client so we can become familiar with the process. 1.This lab will be executed from your Cloud9IDE. Go to Outputs tab from your InfrastructureIdentity-Env-Setup CloudFormation stack, and click on the value next to Cloud9IDE. Make sure your credentials are still in place on the Cloud9IDE, for additional details follow quickly configuring the AWS CLI You may need to disable AWS managed temporary credentials in Cloud9 Preference, AWS Settings, Credentials. 2.Go back to CloudFormation , find the stack that starts with aws-cloud9- , click on Resources and take note Security Group ID (sg-abc123) for InstanceSecurityGroup . Next, find the CloudFormation Stack named InfrastructureIdentity-Env-Setup , click on Resources and take note of the subnet-id (subnet-abc123) for PublicSubnet1 , you will use these in steps 3-6. 3.Create a text file named connect-install.txt, using the following contents: #!/bin/bash apt-get update apt-get install ec 2 -instance-connect less /lib/systemd/system/ssh.service.d/ec 2 -instance-connect.conf 4.The following command will build an Ubuntu instance with EC2-Instance-Connect installed using user-data, using the Security Group ID and Public Subnet created for us earlier, using the following cli command: Before you run the command below remove all quotes and replace \"subnet-xx\" and \"sg-xx\" with the information from the previous step and your SSH key. aws ec2 run-instances --image-id ami-026c8acd92718196b --instance-type t1.micro --subnet-id subnet-xx --security-group-ids sg-xx --region us-east-1 --associate-public-ip-address --tag-specifications ResourceType=instance,Tags={Key= Name ,Value= EC2ConnectInstance } --user-data file://connect-install.txt 5.You will see the output that includes details about the instance you just created. Take note of the instance-id as we will use it in the next section. InstanceId : i-000abcdefghijklmn , 6.Update the Cloud9 security group named aws-cloud9-InfrastructureIdentity-Env-Setup-Cloud9Instance- to allow inbound SSH from 0.0.0.0/0 .","title":"Build an EC2 Instance and install the EC2 Instance Connect client."},{"location":"03-using-EC2-Instance-Connect/#iam-roles-and-permissions-to-enable-ec2-instance-connect","text":"1.Now we will create and attach an IAM Customer Managed Policy to MyWorkshopUser. Create a new file with the following contents but Replace the \"i-xx\" with the instance-id that you noted earlier, save the file name: InstanceConnect.json This file must reside in the same directory where your CLI session is running, or you must specify the location. { Version : 2012-10-17 , Statement : [{ Effect : Allow , Action : ec2-instance-connect:SendSSHPublicKey , Resource : arn:aws:ec2:region:account-id:instance/i-xx , Condition : { StringEquals : { ec2:osuser : ubuntu } } }] } The ec2-instance-connect:SendSSHPublicKey action grants an IAM user permission to push the public key to an instance. The ec2:osuser condition specifies the default user name for the AMI that you used to launch your instance. For Amazon Linux 2, the default user name is ec2-user. For the Ubuntu AMI, the default user name is ubuntu. 2.Create the IAM policy using the file you just created aws iam create-policy --policy-name InstanceConnect --policy-document file://InstanceConnect.json The result should return the following: { Policy : { PolicyName : InstanceConnect , PermissionsBoundaryUsageCount : 0 , CreateDate : 2019-07-23T19:58:59Z , AttachmentCount : 0 , IsAttachable : true , PolicyId : ANPAXMAS344KJ6Q7CGW4F , DefaultVersionId : v1 , Path : / , Arn : arn:aws:iam::abc123:policy/InstanceConnect , UpdateDate : 2019-07-23T19:58:59Z } } This above command will output a policy ARN for the policy we just created. Copy this ARN from the prior output and replace it in the next command. 3.To attach the policy, use the attach-user-policy command, and use the policy ARN output from above. aws iam attach-user-policy --user-name MyWorkshopUser --policy-arn arn:aws:iam::abc123:policy/InstanceConnect","title":"IAM roles and permissions to enable EC2 Instance Connect"},{"location":"03-using-EC2-Instance-Connect/#confirm-access","text":"1.Now using a different browser or sign out of the AWS Management Console and sign back in as MyWorkshopUser. 2.Go to EC2 , select Instances , select the EC2ConnectInstance . Select Connect and choose the option to connect with EC2 Instance Connect (browser-based SSH connection) . Update the user name to ubuntu . EC2 Instance Connect performs the following three actions in one call: it generates a one-time-use SSH public key, pushes the key to the instance where it remains for 60 seconds, and connects the user to the instance. You can use basic SSH/SFTP commands with the Instance Connect CLI. 3.You should see the EC2 Instance Connect (browser-based SSH connection) appear. The command \u201cw\u201d displays the detailed information about the users who are logged in the system currently. The simple \u201cdate\u201d command displays the current date and time (including the day of the week, month, time, time zone, year). Enter in the following commands: w date The results should look similar to this: 4.Now that you've seen how Session Manager and EC2 Instance Connect work. What do you think? What are the Pros Cons for using each? What is your preference?","title":"Confirm Access"},{"location":"04-cleanup/","text":"Module 4: Cleanup In the last module we will terminate the instances we built and delete the CloudFormation stack. Terminate the Amazon EC2 Instances 1.You must perform the following cleanup steps using your Admin Session. 2.Go to the EC2 Console : Select the following Amazon Ec2 Instances that were created as part of Module 2: ProdEC2Instance DevEC2Instance ProdOnPrem DevOnPrem EC2ConnectInstance 3.Click on Actions , click on Instance State , and select Terminate . You will get a Warning, click Yes, Terminate . Delete the AWS CloudFormation stack 1.Go to the CloudFormation Console . Select 'InfrastructureIdentity-Env-Setup', select Actions and click on Delete Stack . At the prompt, select Yes, Delete 2.Go to IAM, click on Users, select MyWorkshopUser and delete.","title":"Module 4: Cleanup"},{"location":"04-cleanup/#module-4-cleanup","text":"In the last module we will terminate the instances we built and delete the CloudFormation stack.","title":"Module 4: Cleanup"},{"location":"04-cleanup/#terminate-the-amazon-ec2-instances","text":"1.You must perform the following cleanup steps using your Admin Session. 2.Go to the EC2 Console : Select the following Amazon Ec2 Instances that were created as part of Module 2: ProdEC2Instance DevEC2Instance ProdOnPrem DevOnPrem EC2ConnectInstance 3.Click on Actions , click on Instance State , and select Terminate . You will get a Warning, click Yes, Terminate .","title":"Terminate the Amazon EC2 Instances"},{"location":"04-cleanup/#delete-the-aws-cloudformation-stack","text":"1.Go to the CloudFormation Console . Select 'InfrastructureIdentity-Env-Setup', select Actions and click on Delete Stack . At the prompt, select Yes, Delete 2.Go to IAM, click on Users, select MyWorkshopUser and delete.","title":"Delete the AWS CloudFormation stack"},{"location":"contribute/","text":"Contributing Guidelines Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution. Reporting Bugs/Feature Requests We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment Contributing via Pull Requests Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request . Finding contributions to work on Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. Code of Conduct This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments. Security issue notifications If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue. Licensing See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Contributing"},{"location":"contribute/#contributing-guidelines","text":"Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.","title":"Contributing Guidelines"},{"location":"contribute/#reporting-bugsfeature-requests","text":"We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment","title":"Reporting Bugs/Feature Requests"},{"location":"contribute/#contributing-via-pull-requests","text":"Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request .","title":"Contributing via Pull Requests"},{"location":"contribute/#finding-contributions-to-work-on","text":"Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.","title":"Finding contributions to work on"},{"location":"contribute/#code-of-conduct","text":"This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"contribute/#security-issue-notifications","text":"If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue.","title":"Security issue notifications"},{"location":"contribute/#licensing","text":"See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Licensing"},{"location":"license/","text":"Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}